{
  "name": "fbp-manifest",
  "version": "0.1.10",
  "description": "Flow-Based Programming Manifest tools",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/flowbased/fbp-manifest.git"
  },
  "author": {
    "name": "Henri Bergius",
    "email": "henri.bergius@iki.fi"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/flowbased/fbp-manifest/issues"
  },
  "bin": {
    "fbp-manifest-deps": "./bin/fbp-manifest-deps",
    "fbp-manifest-list": "./bin/fbp-manifest-list",
    "fbp-manifest-stats": "./bin/fbp-manifest-stats",
    "fbp-manifest-validate": "./bin/fbp-manifest-validate"
  },
  "homepage": "https://github.com/flowbased/fbp-manifest#readme",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^0.4.5",
    "grunt-coffeelint": "^0.0.15",
    "grunt-mocha-test": "^0.12.7",
    "grunt-yaml": "^0.4.2",
    "grunt-yamllint": "^0.2.0",
    "mocha": "^2.4.5"
  },
  "dependencies": {
    "bluebird": "^3.3.4",
    "clone": "^1.0.2",
    "coffee-script": "^1.10.0",
    "commander": "^2.9.0",
    "fbp": "~1.3.0",
    "tv4": "^1.2.7"
  },
  "readme": "Flow-Based Programming Manifest Tools\n=====================================\n\nThis repository provides a schema for Flow-Based Programming manifest (`fbp.json`) files, as well as tools for populating and validating them. The purpose of FBP manifest files is to provide a platform-agnostic registry of flow-based components available in a project.\n\nManifest files can be used by the FBP runtimes themselves for component loading, and is also useful for development tools like [Flowhub](https://flowhub.io) or [DrawFBP](https://github.com/jpaulm/drawfbp).\n\n## Status\n\nEarly stages\n\n## Tools\n\n* `fbp-manifest-list`: Discover available components and list them\n* `fbp-manifest-deps`: Produce a manifest consisting only of dependencies of a given component\n* `fbp-manifest-stats`: Show component reuse statistics for a project\n* `fbp-manifest-validate`: Validate a FBP manifest file against the schema\n\n## Runtime support\n\nFBP Manifest has been designed to have a plugin architecture where the developers of different flow-based runtimes can add support for their system. See [src/runtimes](https://github.com/flowbased/fbp-manifest/tree/master/src/runtimes) for how to do this. Runtimes can of course also just implement `fbp.json` generation and consumption on their own, and merely utilize the JSON schemas from this project to validate their structure.\n\nCurrently supported FBP runtimes are:\n\n* [NoFlo](http://noflojs.org)\n* [MsgFlo](https://github.com/msgflo/msgflo)\n\n## Manifest structure\n\nFBP manifests consist of the following information:\n\n* `version`: version of the manifest specification, currently `1`\n* `modules`: array of module definitions\n* `main`: (optional) main component definition for running the project\n\nThe modules are objects with the following:\n\n* `name`: name of the module\n* `runtime`: runtime the module is for, for example `noflo-nodejs`\n* `base`: base directory path of the module, relative to project root\n* `components`: array of components contained in the module\n* `description`: (optional) human-readable description for the module\n* `icon`: (optional) default icon for components of the module, following [Font Awesome](http://fontawesome.io/icons/) naming conventions\n\nModules supporting multiple runtimes can appear multiple times in a manifest, once per each supported runtime. For example a NoFlo module that has some common components, and specific components for Node.js and browsers may have three entries with specific runtimes: `noflo`, `noflo-nodejs`, and `noflo-browser`. A manifest can contain modules for an arbitrary number of different runtimes.\n\nComponents are objects with the following:\n\n* `name`: name of the component\n* `path`: path used for executing the component. For example a Node.js require path or Java class path\n* `exec`: command used for starting an instance of the component for components that are standalone processes\n* `elementary`: boolean on whether the component is elementary (code) or not (graph)\n* `source`: (optional) path to the source code of the component\n* `inports`: (optional) array of inport definitions for the component\n* `outports`: (optional) array of outport definitions for the component\n\nEach component needs to provide at minimum the information the runtime needs to run it. Additionally it can provide metadata usable for flow-based programming tools like a ports listing. Either `path` or `exec` needs to be provided.\n\nThe full manifest structure can be found in the [schema](https://github.com/flowbased/fbp-manifest/tree/master/schemata). Manifest files can be validated against the JSON schema or with the `fbp-manifest-validate` tool.\n\n### Extending\n\nIt is possible to extend the manifest files with custom runtime-specific information. To do this, place the custom values under a key named after the runtime they're for. So, for example NoFlo's custom information about a component would go under a `noflo` key:\n\n```json\n{\n  \"name\": \"Merge\",\n  \"path\": \"components/Merge.js\",\n  \"source\": \"components/Merge.coffee\",\n  \"elementary\": true,\n  \"noflo\": {\n    \"async\": false\n  }\n}\n```\n\n## Background\n\n* [FBP Protocol: component](http://noflojs.org/documentation/protocol/#component)\n* [NoFlo issue 247: FBP project manifest](https://github.com/noflo/noflo/issues/247)\n* [FBP Glossary](http://www.jpaulmorrison.com/fbp/gloss.htm)\n",
  "readmeFilename": "README.md",
  "_id": "fbp-manifest@0.1.10",
  "_from": "fbp-manifest@>=0.1.8 <0.2.0"
}
